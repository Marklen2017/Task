{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from \"../config/serverApiConfig\";\nconst errorHandler = {\n  success: false,\n  result: null,\n  message: \"Oops there is error\"\n};\nconst headersInstance = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n  }\n};\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n    mode: \"no-cors\"\n  }\n});\nconst request = {\n  search: async (entity, {\n    category,\n    page,\n    limit = 10\n  }) => {\n    try {\n      let query = \"\";\n      let categoryQuery = category ? \"category_ids=\" + category : \"\";\n      let limitQuery = limit ? \"&limit=\" + limit : \"\";\n      let pageQuery = page ? \"&page=\" + page : \"\";\n      query = `?${categoryQuery}${limitQuery}${pageQuery}`;\n      const response = await axiosInstance.get(entity + \"/search\" + query);\n      return {\n        success: true,\n        result: response.data\n      };\n    } catch (error) {\n      return errorHandler;\n    }\n  },\n  get: async entity => {\n    try {\n      const response = await axiosInstance.get(entity);\n      return {\n        success: true,\n        result: response.data\n      };\n    } catch (error) {\n      return errorHandler;\n    }\n  }\n};\nexport default request;","map":{"version":3,"sources":["C:/Users/markl/Desktop/task/src/request/request.ts"],"names":["axios","API_BASE_URL","errorHandler","success","result","message","headersInstance","headers","axiosInstance","create","baseURL","timeout","withCredentials","mode","request","search","entity","category","page","limit","query","categoryQuery","limitQuery","pageQuery","response","get","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE;AACP,mCAA+B;AADxB;AADa,CAAxB;AAMA,MAAMC,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAET,YADwB;AAEjCU,EAAAA,OAAO,EAAE,KAFwB;AAGjCC,EAAAA,eAAe,EAAE,KAHgB;AAIjCL,EAAAA,OAAO,EAAE;AACP,mCAA+B,GADxB;AAEP,oCAAgC,mCAFzB;AAGPM,IAAAA,IAAI,EAAE;AAHC;AAJwB,CAAb,CAAtB;AAiBA,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,OAAOC,MAAP,EAAuB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA,KAAK,GAAG;AAA1B,GAAvB,KAAmE;AACzE,QAAI;AACF,UAAIC,KAAK,GAAG,EAAZ;AAEA,UAAIC,aAAa,GAAGJ,QAAQ,GAAG,kBAAkBA,QAArB,GAAgC,EAA5D;AACA,UAAIK,UAAU,GAAGH,KAAK,GAAG,YAAYA,KAAf,GAAuB,EAA7C;AACA,UAAII,SAAS,GAAGL,IAAI,GAAG,WAAWA,IAAd,GAAqB,EAAzC;AACAE,MAAAA,KAAK,GAAI,IAAGC,aAAc,GAAEC,UAAW,GAAEC,SAAU,EAAnD;AACA,YAAMC,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,GAAd,CAAkBT,MAAM,GAAG,SAAT,GAAqBI,KAAvC,CAAvB;AACA,aAAO;AAAEjB,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,MAAM,EAAEoB,QAAQ,CAACE;AAAlC,OAAP;AACD,KATD,CASE,OAAOC,KAAP,EAAc;AACd,aAAOzB,YAAP;AACD;AACF,GAda;AAgBduB,EAAAA,GAAG,EAAE,MAAOT,MAAP,IAA0B;AAC7B,QAAI;AACF,YAAMQ,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,GAAd,CAAkBT,MAAlB,CAAvB;AACA,aAAO;AAAEb,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,MAAM,EAAEoB,QAAQ,CAACE;AAAlC,OAAP;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACd,aAAOzB,YAAP;AACD;AACF;AAvBa,CAAhB;AAyBA,eAAeY,OAAf","sourcesContent":["import axios from \"axios\";\nimport { API_BASE_URL } from \"../config/serverApiConfig\";\n\nconst errorHandler = {\n  success: false,\n  result: null,\n  message: \"Oops there is error\",\n};\n\nconst headersInstance = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n  },\n};\n\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n    mode: \"no-cors\",\n  },\n});\n\ntype Ioption = {\n  category: string;\n  limit?: number | undefined;\n  page: number;\n};\n\nconst request = {\n  search: async (entity: string, { category, page, limit = 10 }: Ioption) => {\n    try {\n      let query = \"\";\n\n      let categoryQuery = category ? \"category_ids=\" + category : \"\";\n      let limitQuery = limit ? \"&limit=\" + limit : \"\";\n      let pageQuery = page ? \"&page=\" + page : \"\";\n      query = `?${categoryQuery}${limitQuery}${pageQuery}`;\n      const response = await axiosInstance.get(entity + \"/search\" + query);\n      return { success: true, result: response.data };\n    } catch (error) {\n      return errorHandler;\n    }\n  },\n\n  get: async (entity: string) => {\n    try {\n      const response = await axiosInstance.get(entity);\n      return { success: true, result: response.data };\n    } catch (error) {\n      return errorHandler;\n    }\n  },\n};\nexport default request;\n"]},"metadata":{},"sourceType":"module"}