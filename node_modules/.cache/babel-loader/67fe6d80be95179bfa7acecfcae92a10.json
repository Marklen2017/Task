{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport { request } from \"../../request\";\nexport const category = {\n  resetState: () => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_STATE\n    });\n  },\n  list: entity => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING\n    });\n    let data = await request.get(entity);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED\n      });\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/markl/Desktop/task/src/redux/category/actions.ts"],"names":["actionTypes","request","category","resetState","dispatch","type","RESET_STATE","list","entity","REQUEST_LOADING","data","get","success","REQUEST_SUCCESS","payload","result","REQUEST_FAILED"],"mappings":"AACA,OAAO,KAAKA,WAAZ,MAA6B,SAA7B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG;AACtBC,EAAAA,UAAU,EAAE,MAAM,MAAOC,QAAP,IAAmC;AACnDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,WAAW,CAACM;AADX,KAAD,CAAR;AAGD,GALqB;AAMtBC,EAAAA,IAAI,EAAGC,MAAD,IAAoB,MAAOJ,QAAP,IAAmC;AAC3DA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,WAAW,CAACS;AADX,KAAD,CAAR;AAIA,QAAIC,IAAI,GAAG,MAAMT,OAAO,CAACU,GAAR,CAAYH,MAAZ,CAAjB;;AAEA,QAAIE,IAAI,CAACE,OAAL,KAAiB,IAArB,EAA2B;AACzBR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,WAAW,CAACa,eADX;AAEPC,QAAAA,OAAO,EAAEJ,IAAI,CAACK;AAFP,OAAD,CAAR;AAID,KALD,MAKO;AACLX,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,WAAW,CAACgB;AADX,OAAD,CAAR;AAGD;AACF;AAvBqB,CAAjB","sourcesContent":["import { Dispatch } from \"redux\";\nimport * as actionTypes from \"./types\";\nimport { request } from \"../../request\";\n\nexport const category = {\n  resetState: () => async (dispatch: Dispatch<any>) => {\n    dispatch({\n      type: actionTypes.RESET_STATE,\n    });\n  },\n  list: (entity: string) => async (dispatch: Dispatch<any>) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n    });\n\n    let data = await request.get(entity);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        payload: data.result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n      });\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}