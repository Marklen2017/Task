{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport { request } from \"../../request\";\nexport const images = {\n  resetState: () => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_STATE\n    });\n  },\n  search: (entity, category, page, limit) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING\n    });\n    let data = await request.search(entity, {\n      category,\n      page,\n      limit\n    });\n\n    if (data.success === true) {\n      let result = [];\n      data.result.map(item => {\n        result.push({\n          id: item.id,\n          url: item.url\n        });\n      });\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        payload: result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED\n      });\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/markl/Desktop/task/src/redux/images/actions.ts"],"names":["actionTypes","request","images","resetState","dispatch","type","RESET_STATE","search","entity","category","page","limit","REQUEST_LOADING","data","success","result","map","item","push","id","url","REQUEST_SUCCESS","payload","REQUEST_FAILED"],"mappings":"AACA,OAAO,KAAKA,WAAZ,MAA6B,SAA7B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAQA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,UAAU,EAAE,MAAM,MAAOC,QAAP,IAAmC;AACnDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,WAAW,CAACM;AADX,KAAD,CAAR;AAGD,GALmB;AAMpBC,EAAAA,MAAM,EACJ,CAACC,MAAD,EAAiBC,QAAjB,EAAmCC,IAAnC,EAAiDC,KAAjD,KACA,MAAOP,QAAP,IAAmC;AACjCA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,WAAW,CAACY;AADX,KAAD,CAAR;AAIA,QAAIC,IAAI,GAAG,MAAMZ,OAAO,CAACM,MAAR,CAAeC,MAAf,EAAuB;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA;AAAlB,KAAvB,CAAjB;;AAEA,QAAIE,IAAI,CAACC,OAAL,KAAiB,IAArB,EAA2B;AACzB,UAAIC,MAAa,GAAG,EAApB;AACAF,MAAAA,IAAI,CAACE,MAAL,CAAYC,GAAZ,CAAiBC,IAAD,IAA2B;AACzCF,QAAAA,MAAM,CAACG,IAAP,CAAY;AACVC,UAAAA,EAAE,EAAEF,IAAI,CAACE,EADC;AAEVC,UAAAA,GAAG,EAAEH,IAAI,CAACG;AAFA,SAAZ;AAID,OALD;AAMAhB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,WAAW,CAACqB,eADX;AAEPC,QAAAA,OAAO,EAAEP;AAFF,OAAD,CAAR;AAID,KAZD,MAYO;AACLX,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,WAAW,CAACuB;AADX,OAAD,CAAR;AAGD;AACF;AAhCiB,CAAf","sourcesContent":["import { Dispatch } from \"redux\";\nimport * as actionTypes from \"./types\";\nimport { request } from \"../../request\";\nimport { isAnyOf } from \"@reduxjs/toolkit\";\n\ntype itemProps = {\n  id: string;\n  url: string;\n};\n\nexport const images = {\n  resetState: () => async (dispatch: Dispatch<any>) => {\n    dispatch({\n      type: actionTypes.RESET_STATE,\n    });\n  },\n  search:\n    (entity: string, category: string, page: number, limit?: number) =>\n    async (dispatch: Dispatch<any>) => {\n      dispatch({\n        type: actionTypes.REQUEST_LOADING,\n      });\n\n      let data = await request.search(entity, { category, page, limit });\n\n      if (data.success === true) {\n        let result: any[] = [];\n        data.result.map((item: itemProps): void => {\n          result.push({\n            id: item.id,\n            url: item.url,\n          });\n        });\n        dispatch({\n          type: actionTypes.REQUEST_SUCCESS,\n          payload: result,\n        });\n      } else {\n        dispatch({\n          type: actionTypes.REQUEST_FAILED,\n        });\n      }\n    },\n};\n"]},"metadata":{},"sourceType":"module"}